Interface: in order to understand this thing lets see first Inhertitance which is already discused. 
but lets see an example: Demo.java

- We can see that if we create the child class object with parent reference then upon calling the same method show(), each class 
will print the child class Object.
Parent obj1 = new ChildA();  --> In Child A Show
Parent obj2 = new ChildB();  --> In Child B Show


Now we will see what is the need of Interface ??
Demo2.java:
- Here we can see that company hires a developer and it code
- simply we created the class Developer and expected result is coding.. with object created for Naveen as a developer.


Demo3.java:
Now problem comes when developer says I need a Laptop to work unless that, I can't work 
 - So for that problem we created a class Laptop with method code which rather than just "coding" does "code, compile and run"
 - Developer class still has the method devApp() but this time it is not without arguments, rather it has the Laptop object as argument.
 - and inside the devApp() method we're calling the laptop method which is lap.code(); --> "code, compile, run"
 - Also in main() method we changed the thing by just creation of a Laptop object and passed the same in object method call:
    Laptop lap = new Laptop();              // Added extra line here
    Developer naveen = new Developer();     // This is same, no change
    naveen.devApp(lap);                     //Here passing lap as argument
- seems like problem sorted.

Problem: You said you can't work wothout laptop, and it worked for now. but what if company says to the new developer hired that
 you can not be provided with the laptop always, rather you need to work with the Computer. 
- now you need to make the changes in the code.
Demo4.java: 
- here we can see the issue is that the Developer class is tightly coupled with the Laptop object as argument
- now we are providing Desktop object as argument which is giving error 
- so this is because of the tight coupling of the code. Need solution for this.

Solution: Abstract class intervention
- our above problem says that a Developer is dependend on the Laptop 
        class Developer{
            public void devApp(Laptop lap){
            lap.code();
            }
        }
- While in reality a developer is not dependend on the laptop, rather a developer is dependend on the computer which can 
be either Laptop or Desktop, doesn't matter.

Demo5.java: 
- here first we've creted a class Computer which has got no definition in it, empty
- because computer is just a concept, it's not actual computer, actual computer would be a Laptop or a Desktop which are going
    to inherit the Computer class
- Also along with Computer creation we are making computer parent of Laptop & Desktop
- and changing the behaviour of Developer class to take argument of Computer class rather than a Laptop or a Dekstop
- in final we've changed the Laptop and Desktop Object creation as well that reference would be of parent and the object will 
     be of the child class - Laptop and Desktop
            Computer lap = new Laptop();
            Computer desk = new Dekstop();

- this will create the object of Laptop and Dekstop and we can see as per the result as well.



Demo6.java: 
- here we can see that we've made the class Computer as abstract with it's method as well. 
- this way you are making sure that whatever class is inheriting the class Computer will have to implement the Computer class method
i.e. code() as well.



Demo7.java: 
- here we've just replaced the keyword abstract by Interface
- and the keyword extends by Implements